<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>smokeSystem = part_system_create();
smokeType = part_type_create();

part_type_sprite(smokeType,spr_bullet,false,false,false);
part_type_alpha2(smokeType,1,0);
part_type_color2(smokeType,yellow,0);
part_type_speed(smokeType,1,1,0,0);
part_type_direction(smokeType,270,270,0,0);


canMove = true;
canShoot = true;
moveSpeed = 4;
maxSpeed = 4;
isDestroyed = false;
chaseTarget = undefined; // object to chase after
isAlly = false; //is npc an ally
turnRateCof = 1; //How effectively the npc turn, 1 is normal, &gt; 1 more sharply, &lt; 1 slowly 
allyID = 0;
hp = 10;
maxHP = 10;
propellerIndex = 0; //for animating propeller

changeHeightRange = 100; //If player is outside of this range, give chase
heightScale = 1; //scaling based on height
fire = 0;
fireRate = 15;
heightDiff = 0;
fovRange = 300;
fovAngle = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(smokeType);
part_system_destroy(smokeSystem);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>propellerIndex = (++propellerIndex) mod 7;
/*************** Height difference *****************/
heightDiff = global.height-depth;

if (heightDiff-changeHeightRange &lt; heightDiff &amp;&amp; heightDiff &lt; heightDiff+changeHeightRange) {
    depth = var_wipe(depth,global.height,100,0,1);
}
heightScale = (depth/global.height);
image_xscale = heightScale;
image_yscale = heightScale;
image_xscale = clamp(image_xscale,0,3);
image_yscale = clamp(image_yscale,0,3);

/*************** Dies *****************/
image_speed = 0;
image_angle = direction;
part_type_scale(smokeType,2+heightScale,2+heightScale);
if (!isDestroyed) {
    if (hp &lt; 2) {
        part_system_depth(smokeSystem,depth-1);
        part_particles_create(smokeSystem,x-1+irandom_range(-1,1),y-5,smokeType,10);
    }
    if (hp &lt; 0) {
        global.kill ++;
        score += 500;
        repeat(5) effect_create_above(ef_smoke,x,y,0.25,0);
        for (var i = 0; i &lt; 5; i++) {
            var o = instance_create(x,y,obj_explosion_sharpnel);
            o.direction = irandom(360);
            o.speed = 1;
        }
        sprite_index = -1;
        mask_index = -1;
        alarm[0] = 90;
        isDestroyed = true;
    }
    /*************** chase player *****************/
    if (fire &lt;= 0) {fire++;}
    var turnRate = 0;
    if (chaseTarget != undefined) {
        if (instance_exists(chaseTarget)) {
            turnRate = turnRateCof*sign(angle_difference(direction,point_direction(chaseTarget.x,chaseTarget.y,x,y)))*1.5;
            if (inViewRange(chaseTarget,fovAngle,fovRange)) {
                if ((-10 &lt;= heightDiff) &amp;&amp; (heightDiff &lt;= 10)) {
                    if (fire &gt; 0) {
                        fire -= fireRate;
                        if (isAlly) {
                            var l = point_distance(x,y,x+4,y+4);
                            var d = point_direction(x,y,x+2,y+4);
                            var xx = x+lengthdir_x(l,d+direction);
                            var yy = y+lengthdir_y(l,d+direction);
                            shootBullet(xx,yy,10,image_angle);
                            
                            l = point_distance(x,y,x+2,y-4);
                            d = point_direction(x,y,x+2,y-4);
                            xx = x+lengthdir_x(l,d+direction);
                            yy = y+lengthdir_y(l,d+direction);
                            shootBullet(xx,yy,10,image_angle);
                        }
                        else {
                            switch(object_index) {
                                case obj_enemy1:
                                    shootBullet(x,y,10,image_angle);
                                    break;
                                case obj_enemy2:
                                    var dir = point_direction(x,y,chaseTarget.x,chaseTarget.y);
                                    repeat(2) shootBullet(x,y,10,dir+irandom_range(-5,5));
                                    break;
                            }
                        }
                    }
                }
                fovAngle = 15;
            }
            else {
                var border_width = 32;
                turnRate *= 0.01*heightScale*abs(angle_difference(direction,point_direction(chaseTarget.x,chaseTarget.y,x,y)));
                direction += turnRate;
                fovAngle = 60;
            }
        }
        else {
            chaseTarget = undefined;
        }
        image_index = clamp((-turnRate*2)+15,0,29);
    }
    else {
        chaseTarget = findEnemy();
        if (isAlly) {
            var xx = obj_player.x+8+(power(-1,allyID)*(allyID*16));
            var yy = obj_player.y+(((allyID div 2)+1)*16);
            image_index = obj_player.image_index;
            x = var_wipe(x,xx,100,0.05,0);
            y = var_wipe(y,yy,100,0.05,0);
            speed = 0;
            direction += sign(angle_difference(90,direction))*3*turnRateCof;
            //turnRate = sign(angle_difference(direction,point_direction(xx,yy,x,y)))*3;
        }
    }
    speed = var_wipe(speed,moveSpeed*heightScale,100,0.05,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((other.shotFrom).isAlly != isAlly) {
    var heightDiff = abs(other.depth-depth);
    
    if ((-10 &lt;= heightDiff) &amp;&amp; (heightDiff &lt;= 10)) {
        hp -= 1;
        score += 25;
        instance_destroy(other);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!isDestroyed) {
    draw_self();
    draw_sprite_ext(spr_propeller,propellerIndex,x+lengthdir_x(8*heightScale,direction),y+lengthdir_y(8*heightScale,direction),heightScale,heightScale,direction,white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
